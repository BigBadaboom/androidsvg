// Handles the upload to Sonatype.

// This build file requires a recent Gradle (4.9+ ?)

//apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'


version = '1.3'
//version = '1.3-SNAPSHOT'

def  libraryName = 'AndroidSVG'
def  libraryDescription = 'SVG rendering library for Android.'

def  artifactIdAAR = 'androidsvg-aar'
def  artifactIdJAR = 'androidsvg'
def  group = 'com.caverock'

def  developerId = 'BigBadaboom'
def  developerName = 'Paul LeBeau'
def  developerEmail = 'androidsvgfeedback@gmail.com'

def  siteUrl = 'https://github.com/BigBadaboom/androidsvg'
def  gitUrl = 'https://github.com/BigBadaboom/androidsvg.git'

def  licenseName = 'The Apache Software License, Version 2.0'
def  licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

def  releaseRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def  snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"



task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    destinationDir = new File("$rootProject.projectDir/doc/")
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        // Replacement stylesheet for javadocs
        stylesheetFile = new File(projectDir, "javadoc-stylesheet.css");
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

task libraryJar(type: Jar, dependsOn: 'compileReleaseJavaWithJavac') {
    from {
        compileReleaseJavaWithJavac.destinationDir
    }

    // Add all dependencies except for android.jar to the fat jar
    from {
        configurations.compile.findAll {
            it.getName() != 'android.jar' &&
            !it.getName().startsWith('junit')
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    archiveName = "${artifactIdJAR}-${version}.jar"
}